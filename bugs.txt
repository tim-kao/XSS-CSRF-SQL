# shuoting Kao sk4920
# repository name: https://github.com/tim-kao/XSS-CSRF-SQL

# XSS
The cross-site scripting essentially executes the embedded malicious script in the request, and the victim unexpectedly runs it.
In item-single.html, line 62 misuses a safe filter such that it allows variable director executable through javaScript.
To avoid the issue, we must understand director is unsafe, so we remove it and go back to escape data.
from
    <p>Endorsed by {{director|safe}}!</p>
to
    <p>Endorsed by {{director}}!</p>

# CSRF
The original design allows anonymous to gift money to anyone, including themselves.
We can use CSRF middleware to protect against this vulnerability.

To fix the issue,
1. add 'django.middleware.csrf.CsrfViewMiddleware' into settings.py
2. In gift.html, put {% csrf_token %} at line 78 in side form element. <form action="/gift/{{ prod_num }}" method="post"> {% csrf_token %}

Now, if the same operation is applied, then the web would shows Forbidden (403) CSRF verification failed. Request aborted.

# SQL inject:
The code allows raw SQL directly passing into the database, and steal the administrator's password
through "signature": "' union select password from LegacySite_user where username='admin';-- %" in the card.
In order to fix the issue, I use parameterized queries again the attack.
from
    card_query = Card.objects.raw('select id from LegacySite_card where data = \'%s\'' % signature)
to
    card_query = Card.objects.raw('select id from LegacySite_card where data = %s', [signature])
